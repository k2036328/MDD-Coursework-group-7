/*
 * generated by Xtext 2.24.0
 */
grammar InternalEduLangauage;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package uk.ac.kcl.inf.cw.edu.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package uk.ac.kcl.inf.cw.edu.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import uk.ac.kcl.inf.cw.edu.services.EduLangauageGrammarAccess;

}
@parser::members {
	private EduLangauageGrammarAccess grammarAccess;

	public void setGrammarAccess(EduLangauageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleTrigoProgram
entryRuleTrigoProgram
:
{ before(grammarAccess.getTrigoProgramRule()); }
	 ruleTrigoProgram
{ after(grammarAccess.getTrigoProgramRule()); } 
	 EOF 
;

// Rule TrigoProgram
ruleTrigoProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrigoProgramAccess().getStatementsAssignment()); }
		(rule__TrigoProgram__StatementsAssignment)*
		{ after(grammarAccess.getTrigoProgramAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSideStatement
entryRuleSideStatement
:
{ before(grammarAccess.getSideStatementRule()); }
	 ruleSideStatement
{ after(grammarAccess.getSideStatementRule()); } 
	 EOF 
;

// Rule SideStatement
ruleSideStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSideStatementAccess().getGroup()); }
		(rule__SideStatement__Group__0)
		{ after(grammarAccess.getSideStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleTrigoStatement
entryRuleTrigoStatement
:
{ before(grammarAccess.getTrigoStatementRule()); }
	 ruleTrigoStatement
{ after(grammarAccess.getTrigoStatementRule()); } 
	 EOF 
;

// Rule TrigoStatement
ruleTrigoStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTrigoStatementAccess().getGroup()); }
		(rule__TrigoStatement__Group__0)
		{ after(grammarAccess.getTrigoStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplDivision
entryRuleMultiplDivision
:
{ before(grammarAccess.getMultiplDivisionRule()); }
	 ruleMultiplDivision
{ after(grammarAccess.getMultiplDivisionRule()); } 
	 EOF 
;

// Rule MultiplDivision
ruleMultiplDivision 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplDivisionAccess().getGroup()); }
		(rule__MultiplDivision__Group__0)
		{ after(grammarAccess.getMultiplDivisionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryExpression
entryRulePrimaryExpression
:
{ before(grammarAccess.getPrimaryExpressionRule()); }
	 rulePrimaryExpression
{ after(grammarAccess.getPrimaryExpressionRule()); } 
	 EOF 
;

// Rule PrimaryExpression
rulePrimaryExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
		(rule__PrimaryExpression__Alternatives)
		{ after(grammarAccess.getPrimaryExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableReference
entryRuleVariableReference
:
{ before(grammarAccess.getVariableReferenceRule()); }
	 ruleVariableReference
{ after(grammarAccess.getVariableReferenceRule()); } 
	 EOF 
;

// Rule VariableReference
ruleVariableReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableReferenceAccess().getVarAssignment()); }
		(rule__VariableReference__VarAssignment)
		{ after(grammarAccess.getVariableReferenceAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SideCommand
ruleSideCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSideCommandAccess().getAlternatives()); }
		(rule__SideCommand__Alternatives)
		{ after(grammarAccess.getSideCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule AngleCommand
ruleAngleCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAngleCommandAccess().getAlternatives()); }
		(rule__AngleCommand__Alternatives)
		{ after(grammarAccess.getAngleCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getSideStatementParserRuleCall_0()); }
		ruleSideStatement
		{ after(grammarAccess.getStatementAccess().getSideStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTrigoStatementParserRuleCall_1()); }
		ruleTrigoStatement
		{ after(grammarAccess.getStatementAccess().getTrigoStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_2()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getStatementAccess().getVariableDeclarationParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplDivisionAccess().getGroup_1_0()); }
		(rule__MultiplDivision__Group_1_0__0)
		{ after(grammarAccess.getMultiplDivisionAccess().getGroup_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplDivisionAccess().getGroup_1_1()); }
		(rule__MultiplDivision__Group_1_1__0)
		{ after(grammarAccess.getMultiplDivisionAccess().getGroup_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getPrimaryExpressionAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_1()); }
		ruleVariableReference
		{ after(grammarAccess.getPrimaryExpressionAccess().getVariableReferenceParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
		(rule__PrimaryExpression__Group_2__0)
		{ after(grammarAccess.getPrimaryExpressionAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSideCommandAccess().getAdjacentEnumLiteralDeclaration_0()); }
		('adjacent')
		{ after(grammarAccess.getSideCommandAccess().getAdjacentEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getSideCommandAccess().getOppositeEnumLiteralDeclaration_1()); }
		('opposite')
		{ after(grammarAccess.getSideCommandAccess().getOppositeEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getSideCommandAccess().getHypotenuseEnumLiteralDeclaration_2()); }
		('hypotenuse')
		{ after(grammarAccess.getSideCommandAccess().getHypotenuseEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AngleCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAngleCommandAccess().getSinEnumLiteralDeclaration_0()); }
		('sin')
		{ after(grammarAccess.getAngleCommandAccess().getSinEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getAngleCommandAccess().getCosEnumLiteralDeclaration_1()); }
		('cos')
		{ after(grammarAccess.getAngleCommandAccess().getCosEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getAngleCommandAccess().getTanEnumLiteralDeclaration_2()); }
		('tan')
		{ after(grammarAccess.getAngleCommandAccess().getTanEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SideStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SideStatement__Group__0__Impl
	rule__SideStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSideStatementAccess().getCommandAssignment_0()); }
	(rule__SideStatement__CommandAssignment_0)
	{ after(grammarAccess.getSideStatementAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SideStatement__Group__1__Impl
	rule__SideStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSideStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getSideStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SideStatement__Group__2__Impl
	rule__SideStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSideStatementAccess().getStepsAssignment_2()); }
	(rule__SideStatement__StepsAssignment_2)
	{ after(grammarAccess.getSideStatementAccess().getStepsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SideStatement__Group__3__Impl
	rule__SideStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSideStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getSideStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SideStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSideStatementAccess().getCmKeyword_4()); }
	'cm'
	{ after(grammarAccess.getSideStatementAccess().getCmKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrigoStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrigoStatement__Group__0__Impl
	rule__TrigoStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigoStatementAccess().getCommandAssignment_0()); }
	(rule__TrigoStatement__CommandAssignment_0)
	{ after(grammarAccess.getTrigoStatementAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrigoStatement__Group__1__Impl
	rule__TrigoStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigoStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getTrigoStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrigoStatement__Group__2__Impl
	rule__TrigoStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigoStatementAccess().getStepsAssignment_2()); }
	(rule__TrigoStatement__StepsAssignment_2)
	{ after(grammarAccess.getTrigoStatementAccess().getStepsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TrigoStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTrigoStatementAccess().getRightParenthesisKeyword_3()); }
	(')')*
	{ after(grammarAccess.getTrigoStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplDivisionParserRuleCall_0()); }
	ruleMultiplDivision
	{ after(grammarAccess.getAdditionAccess().getMultiplDivisionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
	'+'
	{ after(grammarAccess.getAdditionAccess().getPlusSignKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplDivision__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group__0__Impl
	rule__MultiplDivision__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getPrimaryExpressionParserRuleCall_0()); }
	rulePrimaryExpression
	{ after(grammarAccess.getMultiplDivisionAccess().getPrimaryExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getAlternatives_1()); }
	(rule__MultiplDivision__Alternatives_1)*
	{ after(grammarAccess.getMultiplDivisionAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplDivision__Group_1_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group_1_0__0__Impl
	rule__MultiplDivision__Group_1_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getMultiplicationLeftAction_1_0_0()); }
	()
	{ after(grammarAccess.getMultiplDivisionAccess().getMultiplicationLeftAction_1_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group_1_0__1__Impl
	rule__MultiplDivision__Group_1_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getAsteriskKeyword_1_0_1()); }
	'*'
	{ after(grammarAccess.getMultiplDivisionAccess().getAsteriskKeyword_1_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group_1_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getRightAssignment_1_0_2()); }
	(rule__MultiplDivision__RightAssignment_1_0_2)
	{ after(grammarAccess.getMultiplDivisionAccess().getRightAssignment_1_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MultiplDivision__Group_1_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group_1_1__0__Impl
	rule__MultiplDivision__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getDivisionLeftAction_1_1_0()); }
	()
	{ after(grammarAccess.getMultiplDivisionAccess().getDivisionLeftAction_1_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group_1_1__1__Impl
	rule__MultiplDivision__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getSolidusKeyword_1_1_1()); }
	'/'
	{ after(grammarAccess.getMultiplDivisionAccess().getSolidusKeyword_1_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MultiplDivision__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__Group_1_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplDivisionAccess().getRightAssignment_1_1_2()); }
	(rule__MultiplDivision__RightAssignment_1_1_2)
	{ after(grammarAccess.getMultiplDivisionAccess().getRightAssignment_1_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryExpression__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__0__Impl
	rule__PrimaryExpression__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryExpressionAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__1__Impl
	rule__PrimaryExpression__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getAdditionParserRuleCall_2_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryExpressionAccess().getAdditionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryExpression__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryExpression__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryExpressionAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TrigoProgram__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrigoProgramAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getTrigoProgramAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValuePrimaryExpressionParserRuleCall_3_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getVariableDeclarationAccess().getValuePrimaryExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSideStatementAccess().getCommandSideCommandEnumRuleCall_0_0()); }
		ruleSideCommand
		{ after(grammarAccess.getSideStatementAccess().getCommandSideCommandEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SideStatement__StepsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSideStatementAccess().getStepsREALParserRuleCall_2_0()); }
		ruleREAL
		{ after(grammarAccess.getSideStatementAccess().getStepsREALParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrigoStatementAccess().getCommandAngleCommandEnumRuleCall_0_0()); }
		ruleAngleCommand
		{ after(grammarAccess.getTrigoStatementAccess().getCommandAngleCommandEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TrigoStatement__StepsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTrigoStatementAccess().getStepsPrimaryExpressionParserRuleCall_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getTrigoStatementAccess().getStepsPrimaryExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplDivisionParserRuleCall_1_2_0()); }
		ruleMultiplDivision
		{ after(grammarAccess.getAdditionAccess().getRightMultiplDivisionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__RightAssignment_1_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_0_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getMultiplDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MultiplDivision__RightAssignment_1_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_1_2_0()); }
		rulePrimaryExpression
		{ after(grammarAccess.getMultiplDivisionAccess().getRightPrimaryExpressionParserRuleCall_1_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableReference__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableReferenceAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getVariableReferenceAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getVariableReferenceAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getVariableReferenceAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.cw.edu.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.cw.edu.ide.contentassist.antlr.internal.InternalEduLangauageParser;
import uk.ac.kcl.inf.cw.edu.services.EduLangauageGrammarAccess;

public class EduLangauageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EduLangauageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EduLangauageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getMultiplDivisionAccess().getAlternatives_1(), "rule__MultiplDivision__Alternatives_1");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getAlternatives(), "rule__PrimaryExpression__Alternatives");
			builder.put(grammarAccess.getSideCommandAccess().getAlternatives(), "rule__SideCommand__Alternatives");
			builder.put(grammarAccess.getAngleCommandAccess().getAlternatives(), "rule__AngleCommand__Alternatives");
			builder.put(grammarAccess.getVariableDeclarationAccess().getGroup(), "rule__VariableDeclaration__Group__0");
			builder.put(grammarAccess.getSideStatementAccess().getGroup(), "rule__SideStatement__Group__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getTrigoStatementAccess().getGroup(), "rule__TrigoStatement__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup(), "rule__Addition__Group__0");
			builder.put(grammarAccess.getAdditionAccess().getGroup_1(), "rule__Addition__Group_1__0");
			builder.put(grammarAccess.getMultiplDivisionAccess().getGroup(), "rule__MultiplDivision__Group__0");
			builder.put(grammarAccess.getMultiplDivisionAccess().getGroup_1_0(), "rule__MultiplDivision__Group_1_0__0");
			builder.put(grammarAccess.getMultiplDivisionAccess().getGroup_1_1(), "rule__MultiplDivision__Group_1_1__0");
			builder.put(grammarAccess.getPrimaryExpressionAccess().getGroup_2(), "rule__PrimaryExpression__Group_2__0");
			builder.put(grammarAccess.getTrigoProgramAccess().getStatementsAssignment(), "rule__TrigoProgram__StatementsAssignment");
			builder.put(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1(), "rule__VariableDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3(), "rule__VariableDeclaration__ValueAssignment_3");
			builder.put(grammarAccess.getSideStatementAccess().getCommandAssignment_0(), "rule__SideStatement__CommandAssignment_0");
			builder.put(grammarAccess.getSideStatementAccess().getStepsAssignment_2(), "rule__SideStatement__StepsAssignment_2");
			builder.put(grammarAccess.getTrigoStatementAccess().getCommandAssignment_0(), "rule__TrigoStatement__CommandAssignment_0");
			builder.put(grammarAccess.getTrigoStatementAccess().getStepsAssignment_2(), "rule__TrigoStatement__StepsAssignment_2");
			builder.put(grammarAccess.getAdditionAccess().getRightAssignment_1_2(), "rule__Addition__RightAssignment_1_2");
			builder.put(grammarAccess.getMultiplDivisionAccess().getRightAssignment_1_0_2(), "rule__MultiplDivision__RightAssignment_1_0_2");
			builder.put(grammarAccess.getMultiplDivisionAccess().getRightAssignment_1_1_2(), "rule__MultiplDivision__RightAssignment_1_1_2");
			builder.put(grammarAccess.getIntLiteralAccess().getValAssignment(), "rule__IntLiteral__ValAssignment");
			builder.put(grammarAccess.getVariableReferenceAccess().getVarAssignment(), "rule__VariableReference__VarAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EduLangauageGrammarAccess grammarAccess;

	@Override
	protected InternalEduLangauageParser createParser() {
		InternalEduLangauageParser result = new InternalEduLangauageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EduLangauageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EduLangauageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}

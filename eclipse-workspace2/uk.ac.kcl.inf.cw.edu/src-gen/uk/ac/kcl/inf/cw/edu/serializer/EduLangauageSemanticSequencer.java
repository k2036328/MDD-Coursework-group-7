/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.cw.edu.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.cw.edu.eduLangauage.Addition;
import uk.ac.kcl.inf.cw.edu.eduLangauage.Division;
import uk.ac.kcl.inf.cw.edu.eduLangauage.EduLangauagePackage;
import uk.ac.kcl.inf.cw.edu.eduLangauage.IntLiteral;
import uk.ac.kcl.inf.cw.edu.eduLangauage.Multiplication;
import uk.ac.kcl.inf.cw.edu.eduLangauage.SideStatement;
import uk.ac.kcl.inf.cw.edu.eduLangauage.TrigoProgram;
import uk.ac.kcl.inf.cw.edu.eduLangauage.TrigoStatement;
import uk.ac.kcl.inf.cw.edu.eduLangauage.VariableDeclaration;
import uk.ac.kcl.inf.cw.edu.eduLangauage.VariableReference;
import uk.ac.kcl.inf.cw.edu.services.EduLangauageGrammarAccess;

@SuppressWarnings("all")
public class EduLangauageSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EduLangauageGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EduLangauagePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EduLangauagePackage.ADDITION:
				sequence_Addition(context, (Addition) semanticObject); 
				return; 
			case EduLangauagePackage.DIVISION:
				sequence_MultiplDivision(context, (Division) semanticObject); 
				return; 
			case EduLangauagePackage.INT_LITERAL:
				sequence_IntLiteral(context, (IntLiteral) semanticObject); 
				return; 
			case EduLangauagePackage.MULTIPLICATION:
				sequence_MultiplDivision(context, (Multiplication) semanticObject); 
				return; 
			case EduLangauagePackage.SIDE_STATEMENT:
				sequence_SideStatement(context, (SideStatement) semanticObject); 
				return; 
			case EduLangauagePackage.TRIGO_PROGRAM:
				sequence_TrigoProgram(context, (TrigoProgram) semanticObject); 
				return; 
			case EduLangauagePackage.TRIGO_STATEMENT:
				sequence_TrigoStatement(context, (TrigoStatement) semanticObject); 
				return; 
			case EduLangauagePackage.VARIABLE_DECLARATION:
				sequence_VariableDeclaration(context, (VariableDeclaration) semanticObject); 
				return; 
			case EduLangauagePackage.VARIABLE_REFERENCE:
				sequence_VariableReference(context, (VariableReference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Addition returns Addition
	 *     Addition.Addition_1_0 returns Addition
	 *     MultiplDivision returns Addition
	 *     MultiplDivision.Multiplication_1_0_0 returns Addition
	 *     MultiplDivision.Division_1_1_0 returns Addition
	 *     PrimaryExpression returns Addition
	 *
	 * Constraint:
	 *     (left=Addition_Addition_1_0 right+=MultiplDivision)
	 */
	protected void sequence_Addition(ISerializationContext context, Addition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns IntLiteral
	 *     Addition.Addition_1_0 returns IntLiteral
	 *     MultiplDivision returns IntLiteral
	 *     MultiplDivision.Multiplication_1_0_0 returns IntLiteral
	 *     MultiplDivision.Division_1_1_0 returns IntLiteral
	 *     PrimaryExpression returns IntLiteral
	 *     IntLiteral returns IntLiteral
	 *
	 * Constraint:
	 *     val=INT
	 */
	protected void sequence_IntLiteral(ISerializationContext context, IntLiteral semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.INT_LITERAL__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.INT_LITERAL__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Division
	 *     Addition.Addition_1_0 returns Division
	 *     MultiplDivision returns Division
	 *     MultiplDivision.Multiplication_1_0_0 returns Division
	 *     MultiplDivision.Division_1_1_0 returns Division
	 *     PrimaryExpression returns Division
	 *
	 * Constraint:
	 *     (left=MultiplDivision_Division_1_1_0 right+=PrimaryExpression)
	 */
	protected void sequence_MultiplDivision(ISerializationContext context, Division semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns Multiplication
	 *     Addition.Addition_1_0 returns Multiplication
	 *     MultiplDivision returns Multiplication
	 *     MultiplDivision.Multiplication_1_0_0 returns Multiplication
	 *     MultiplDivision.Division_1_1_0 returns Multiplication
	 *     PrimaryExpression returns Multiplication
	 *
	 * Constraint:
	 *     (left=MultiplDivision_Multiplication_1_0_0 right+=PrimaryExpression)
	 */
	protected void sequence_MultiplDivision(ISerializationContext context, Multiplication semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns SideStatement
	 *     SideStatement returns SideStatement
	 *
	 * Constraint:
	 *     (command=SideCommand steps=REAL)
	 */
	protected void sequence_SideStatement(ISerializationContext context, SideStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.SIDE_STATEMENT__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.SIDE_STATEMENT__COMMAND));
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.SIDE_STATEMENT__STEPS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.SIDE_STATEMENT__STEPS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSideStatementAccess().getCommandSideCommandEnumRuleCall_0_0(), semanticObject.getCommand());
		feeder.accept(grammarAccess.getSideStatementAccess().getStepsREALParserRuleCall_2_0(), semanticObject.getSteps());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrigoProgram returns TrigoProgram
	 *
	 * Constraint:
	 *     statements+=Statement+
	 */
	protected void sequence_TrigoProgram(ISerializationContext context, TrigoProgram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns TrigoStatement
	 *     TrigoStatement returns TrigoStatement
	 *
	 * Constraint:
	 *     (command=AngleCommand steps=PrimaryExpression)
	 */
	protected void sequence_TrigoStatement(ISerializationContext context, TrigoStatement semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.TRIGO_STATEMENT__COMMAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.TRIGO_STATEMENT__COMMAND));
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.TRIGO_STATEMENT__STEPS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.TRIGO_STATEMENT__STEPS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTrigoStatementAccess().getCommandAngleCommandEnumRuleCall_0_0(), semanticObject.getCommand());
		feeder.accept(grammarAccess.getTrigoStatementAccess().getStepsPrimaryExpressionParserRuleCall_2_0(), semanticObject.getSteps());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Statement returns VariableDeclaration
	 *     VariableDeclaration returns VariableDeclaration
	 *
	 * Constraint:
	 *     (name=ID value=PrimaryExpression)
	 */
	protected void sequence_VariableDeclaration(ISerializationContext context, VariableDeclaration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.VARIABLE_DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.VARIABLE_DECLARATION__NAME));
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.VARIABLE_DECLARATION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.VARIABLE_DECLARATION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getVariableDeclarationAccess().getValuePrimaryExpressionParserRuleCall_3_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Addition returns VariableReference
	 *     Addition.Addition_1_0 returns VariableReference
	 *     MultiplDivision returns VariableReference
	 *     MultiplDivision.Multiplication_1_0_0 returns VariableReference
	 *     MultiplDivision.Division_1_1_0 returns VariableReference
	 *     PrimaryExpression returns VariableReference
	 *     VariableReference returns VariableReference
	 *
	 * Constraint:
	 *     var=[VariableDeclaration|ID]
	 */
	protected void sequence_VariableReference(ISerializationContext context, VariableReference semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EduLangauagePackage.Literals.VARIABLE_REFERENCE__VAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EduLangauagePackage.Literals.VARIABLE_REFERENCE__VAR));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVariableReferenceAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1(), semanticObject.eGet(EduLangauagePackage.Literals.VARIABLE_REFERENCE__VAR, false));
		feeder.finish();
	}
	
	
}

/*
 * generated by Xtext 2.24.0
 */
package uk.ac.kcl.inf.cw.edu.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EduLangauageGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class TrigoProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.TrigoProgram");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//TrigoProgram:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSideStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrigoStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cVariableDeclarationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Statement:
		//	SideStatement | TrigoStatement | VariableDeclaration;
		@Override public ParserRule getRule() { return rule; }
		
		//SideStatement | TrigoStatement | VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SideStatement
		public RuleCall getSideStatementParserRuleCall_0() { return cSideStatementParserRuleCall_0; }
		
		//TrigoStatement
		public RuleCall getTrigoStatementParserRuleCall_1() { return cTrigoStatementParserRuleCall_1; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_2() { return cVariableDeclarationParserRuleCall_2; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValuePrimaryExpressionParserRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//	"var" name=ID "=" value=PrimaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=PrimaryExpression
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=PrimaryExpression
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//PrimaryExpression
		public RuleCall getValuePrimaryExpressionParserRuleCall_3_0() { return cValuePrimaryExpressionParserRuleCall_3_0; }
	}
	public class SideStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.SideStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandSideCommandEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsREALParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cCmKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SideStatement:
		//	command=SideCommand "(" steps=REAL ")" "cm";
		@Override public ParserRule getRule() { return rule; }
		
		//command=SideCommand "(" steps=REAL ")" "cm"
		public Group getGroup() { return cGroup; }
		
		//command=SideCommand
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//SideCommand
		public RuleCall getCommandSideCommandEnumRuleCall_0_0() { return cCommandSideCommandEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//steps=REAL
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//REAL
		public RuleCall getStepsREALParserRuleCall_2_0() { return cStepsREALParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
		
		//"cm"
		public Keyword getCmKeyword_4() { return cCmKeyword_4; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class TrigoStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.TrigoStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandAngleCommandEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsPrimaryExpressionParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//TrigoStatement:
		//	command=AngleCommand "(" steps=PrimaryExpression ")"*;
		@Override public ParserRule getRule() { return rule; }
		
		//command=AngleCommand "(" steps=PrimaryExpression ")"*
		public Group getGroup() { return cGroup; }
		
		//command=AngleCommand
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//AngleCommand
		public RuleCall getCommandAngleCommandEnumRuleCall_0_0() { return cCommandAngleCommandEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//steps=PrimaryExpression
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//PrimaryExpression
		public RuleCall getStepsPrimaryExpressionParserRuleCall_2_0() { return cStepsPrimaryExpressionParserRuleCall_2_0; }
		
		//")"*
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplDivisionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplDivisionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition IntExpression:
		//	MultiplDivision ({Addition.left=current} '+' right+=MultiplDivision)*;
		@Override public ParserRule getRule() { return rule; }
		
		//MultiplDivision ({Addition.left=current} '+' right+=MultiplDivision)*
		public Group getGroup() { return cGroup; }
		
		//MultiplDivision
		public RuleCall getMultiplDivisionParserRuleCall_0() { return cMultiplDivisionParserRuleCall_0; }
		
		//({Addition.left=current} '+' right+=MultiplDivision)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left=current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//right+=MultiplDivision
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//MultiplDivision
		public RuleCall getRightMultiplDivisionParserRuleCall_1_2_0() { return cRightMultiplDivisionParserRuleCall_1_2_0; }
	}
	public class MultiplDivisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.MultiplDivision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Action cMultiplicationLeftAction_1_0_0 = (Action)cGroup_1_0.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_0_1 = (Keyword)cGroup_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_0_2 = (Assignment)cGroup_1_0.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_0_2_0 = (RuleCall)cRightAssignment_1_0_2.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Action cDivisionLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightPrimaryExpressionParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//MultiplDivision IntExpression:
		//	PrimaryExpression ({Multiplication.left=current} '*' right+=PrimaryExpression | {Division.left=current} '/'
		//	right+=PrimaryExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//PrimaryExpression ({Multiplication.left=current} '*' right+=PrimaryExpression | {Division.left=current} '/'
		//right+=PrimaryExpression)*
		public Group getGroup() { return cGroup; }
		
		//PrimaryExpression
		public RuleCall getPrimaryExpressionParserRuleCall_0() { return cPrimaryExpressionParserRuleCall_0; }
		
		//({Multiplication.left=current} '*' right+=PrimaryExpression | {Division.left=current} '/' right+=PrimaryExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//{Multiplication.left=current} '*' right+=PrimaryExpression
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//{Multiplication.left=current}
		public Action getMultiplicationLeftAction_1_0_0() { return cMultiplicationLeftAction_1_0_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_0_1() { return cAsteriskKeyword_1_0_1; }
		
		//right+=PrimaryExpression
		public Assignment getRightAssignment_1_0_2() { return cRightAssignment_1_0_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_0_2_0() { return cRightPrimaryExpressionParserRuleCall_1_0_2_0; }
		
		//{Division.left=current} '/' right+=PrimaryExpression
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//{Division.left=current}
		public Action getDivisionLeftAction_1_1_0() { return cDivisionLeftAction_1_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1_1() { return cSolidusKeyword_1_1_1; }
		
		//right+=PrimaryExpression
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }
		
		//PrimaryExpression
		public RuleCall getRightPrimaryExpressionParserRuleCall_1_1_2_0() { return cRightPrimaryExpressionParserRuleCall_1_1_2_0; }
	}
	public class PrimaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.PrimaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVariableReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//PrimaryExpression IntExpression:
		//	IntLiteral | VariableReference |
		//	'(' Addition ')';
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral | VariableReference |
		//'(' Addition ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//VariableReference
		public RuleCall getVariableReferenceParserRuleCall_1() { return cVariableReferenceParserRuleCall_1; }
		
		//'(' Addition ')'
		public Group getGroup_2() { return cGroup_2; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class VariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.VariableReference");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//VariableReference:
		//	var=[VariableDeclaration];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	
	public class SideCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.SideCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAdjacentEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAdjacentAdjacentKeyword_0_0 = (Keyword)cAdjacentEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOppositeEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOppositeOppositeKeyword_1_0 = (Keyword)cOppositeEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHypotenuseEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHypotenuseHypotenuseKeyword_2_0 = (Keyword)cHypotenuseEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum SideCommand:
		//	adjacent | opposite | hypotenuse;
		public EnumRule getRule() { return rule; }
		
		//adjacent | opposite | hypotenuse
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//adjacent
		public EnumLiteralDeclaration getAdjacentEnumLiteralDeclaration_0() { return cAdjacentEnumLiteralDeclaration_0; }
		
		//"adjacent"
		public Keyword getAdjacentAdjacentKeyword_0_0() { return cAdjacentAdjacentKeyword_0_0; }
		
		//opposite
		public EnumLiteralDeclaration getOppositeEnumLiteralDeclaration_1() { return cOppositeEnumLiteralDeclaration_1; }
		
		//"opposite"
		public Keyword getOppositeOppositeKeyword_1_0() { return cOppositeOppositeKeyword_1_0; }
		
		//hypotenuse
		public EnumLiteralDeclaration getHypotenuseEnumLiteralDeclaration_2() { return cHypotenuseEnumLiteralDeclaration_2; }
		
		//"hypotenuse"
		public Keyword getHypotenuseHypotenuseKeyword_2_0() { return cHypotenuseHypotenuseKeyword_2_0; }
	}
	public class AngleCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.inf.cw.edu.EduLangauage.AngleCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSinEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSinSinKeyword_0_0 = (Keyword)cSinEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCosEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCosCosKeyword_1_0 = (Keyword)cCosEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cTanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cTanTanKeyword_2_0 = (Keyword)cTanEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum AngleCommand:
		//	sin | cos | tan;
		public EnumRule getRule() { return rule; }
		
		//sin | cos | tan
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//sin
		public EnumLiteralDeclaration getSinEnumLiteralDeclaration_0() { return cSinEnumLiteralDeclaration_0; }
		
		//"sin"
		public Keyword getSinSinKeyword_0_0() { return cSinSinKeyword_0_0; }
		
		//cos
		public EnumLiteralDeclaration getCosEnumLiteralDeclaration_1() { return cCosEnumLiteralDeclaration_1; }
		
		//"cos"
		public Keyword getCosCosKeyword_1_0() { return cCosCosKeyword_1_0; }
		
		//tan
		public EnumLiteralDeclaration getTanEnumLiteralDeclaration_2() { return cTanEnumLiteralDeclaration_2; }
		
		//"tan"
		public Keyword getTanTanKeyword_2_0() { return cTanTanKeyword_2_0; }
	}
	
	private final TrigoProgramElements pTrigoProgram;
	private final StatementElements pStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final SideStatementElements pSideStatement;
	private final REALElements pREAL;
	private final SideCommandElements eSideCommand;
	private final TrigoStatementElements pTrigoStatement;
	private final AdditionElements pAddition;
	private final MultiplDivisionElements pMultiplDivision;
	private final PrimaryExpressionElements pPrimaryExpression;
	private final IntLiteralElements pIntLiteral;
	private final VariableReferenceElements pVariableReference;
	private final AngleCommandElements eAngleCommand;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public EduLangauageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pTrigoProgram = new TrigoProgramElements();
		this.pStatement = new StatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pSideStatement = new SideStatementElements();
		this.pREAL = new REALElements();
		this.eSideCommand = new SideCommandElements();
		this.pTrigoStatement = new TrigoStatementElements();
		this.pAddition = new AdditionElements();
		this.pMultiplDivision = new MultiplDivisionElements();
		this.pPrimaryExpression = new PrimaryExpressionElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pVariableReference = new VariableReferenceElements();
		this.eAngleCommand = new AngleCommandElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.inf.cw.edu.EduLangauage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//TrigoProgram:
	//	statements+=Statement*;
	public TrigoProgramElements getTrigoProgramAccess() {
		return pTrigoProgram;
	}
	
	public ParserRule getTrigoProgramRule() {
		return getTrigoProgramAccess().getRule();
	}
	
	//Statement:
	//	SideStatement | TrigoStatement | VariableDeclaration;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//	"var" name=ID "=" value=PrimaryExpression;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//SideStatement:
	//	command=SideCommand "(" steps=REAL ")" "cm";
	public SideStatementElements getSideStatementAccess() {
		return pSideStatement;
	}
	
	public ParserRule getSideStatementRule() {
		return getSideStatementAccess().getRule();
	}
	
	//REAL ecore::EFloat hidden():
	//	INT '.' INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	//enum SideCommand:
	//	adjacent | opposite | hypotenuse;
	public SideCommandElements getSideCommandAccess() {
		return eSideCommand;
	}
	
	public EnumRule getSideCommandRule() {
		return getSideCommandAccess().getRule();
	}
	
	//TrigoStatement:
	//	command=AngleCommand "(" steps=PrimaryExpression ")"*;
	public TrigoStatementElements getTrigoStatementAccess() {
		return pTrigoStatement;
	}
	
	public ParserRule getTrigoStatementRule() {
		return getTrigoStatementAccess().getRule();
	}
	
	//Addition IntExpression:
	//	MultiplDivision ({Addition.left=current} '+' right+=MultiplDivision)*;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//MultiplDivision IntExpression:
	//	PrimaryExpression ({Multiplication.left=current} '*' right+=PrimaryExpression | {Division.left=current} '/'
	//	right+=PrimaryExpression)*;
	public MultiplDivisionElements getMultiplDivisionAccess() {
		return pMultiplDivision;
	}
	
	public ParserRule getMultiplDivisionRule() {
		return getMultiplDivisionAccess().getRule();
	}
	
	//PrimaryExpression IntExpression:
	//	IntLiteral | VariableReference |
	//	'(' Addition ')';
	public PrimaryExpressionElements getPrimaryExpressionAccess() {
		return pPrimaryExpression;
	}
	
	public ParserRule getPrimaryExpressionRule() {
		return getPrimaryExpressionAccess().getRule();
	}
	
	//IntLiteral:
	//	val=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//VariableReference:
	//	var=[VariableDeclaration];
	public VariableReferenceElements getVariableReferenceAccess() {
		return pVariableReference;
	}
	
	public ParserRule getVariableReferenceRule() {
		return getVariableReferenceAccess().getRule();
	}
	
	//enum AngleCommand:
	//	sin | cos | tan;
	public AngleCommandElements getAngleCommandAccess() {
		return eAngleCommand;
	}
	
	public EnumRule getAngleCommandRule() {
		return getAngleCommandAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
